基本使用 TensorFlow
基础概念:
    使用图graph来表示计算任务
    在会话session的上下文中执行图
    使用tensor表示数据
    通过变量Variable维护状态
    使用feed和fetch可以为任意的操作赋值或者从中获取数据

综述：
    tf 使用图来表示计算任务，图中的节点称为op。一个op获得0个或多个tensor，执行计算，产生0个或者多个tensor。每个tensor都是一个类型化的多维数组
    tf图描述了计算过程。为了进行计算，图必须在会话里被启动。会话将图的op分发的CPU/GPU上，同事提供执行op的方法。这些方法执行后，将产生的tensor返回。

计算图：
    tf程序通常被组织为一个构建阶段和一个执行阶段。在构建阶段，op的执行步骤被描述成一个图。在执行阶段，使用会话执行图中的op

构建图：
    step1：创建源op，即不需要任何输入，例如常量

启动图：
    step1：创建session对象，如果没有创建参数，会构造默认图
        sess = tf.Session()
    step2: 启动会话  sess.run()
    step3: 关闭sessions，以释放资源 sess.close()

Tensor：
    tf 使用tensor数据结构来表示数据, 计算图中, 操作间传递的数据都是 tensor.
    你可以把 TensorFlow tensor 看作是一个 n 维的数组或列表. 一个 tensor 包含一个静态类型 rank, 和 一个 shape

变量：
    变量维护图执行过程中的状态信息
    tf.Variable()

Fetch:
    为了取回操作的输出内容, 可以在使用run(),调用 执行图时, 传入一些 tensor, 这些 tensor 会帮助你取回结果
    input1 = tf.constant(3.0)
    input2 = tf.constant(2.0)
    input3 = tf.constant(5.0)
    intermed = tf.add(input2, input3)
    mul = tf.mul(input1, input2)
    with tf.Session() as sess:
        result = sess.run([mul, intermed])
        print(result)
Feed机制:
    该机制可以临时替代图中的任意操作中的 tensor 可以对图中任何操作提交补丁, 直接插入一个 tensor.
    feed 使用一个 tensor 值临时替换一个操作的输出结果. 你可以提供 feed 数据作为 run() 调用的参数.
    feed 只在调用它的方法内有效, 方法结束, feed 就会消失. 最常见的用例是将某些特殊的操作指定为 "feed" 操作,
    标记的方法是使用 tf.placeholder() 为这些操作创建占位符.
    input1 = tf.placeholder(tf.types.float32)
    input2 = tf.placeholder(tf.types.float32)
    output = tf.mul(input1, input2)
    with tf.Session() as sess:
        print(sess.run([output], feed_dict={input1: [7.0], input2: [3.0]}))